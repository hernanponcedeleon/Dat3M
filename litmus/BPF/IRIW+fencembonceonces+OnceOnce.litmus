BPF IRIW+fencembonceonces+OnceOnce

(*
 * Result: Never
 *
 * Test of independent reads from independent writes with a fence between
 * each pairs of reads.  In other words, is a full barrier sufficient to
 * cause two different reading processes to agree on the order of a pair of
 * writes, where each write is to a different variable by a different
 * process?  This litmus test exercises LKMM's "propagation" rule.
 *
 * Atomic ops with a fetch act as full barriers.
 *)

{
0:r0=x;

1:r0=x;
1:r1=y;
1:r5=tmp;
1:r6=0;

2:r1=y;

3:r0=x;
3:r1=y;
3:r5=tmp2;
3:r6=0
}

P0		     | P1		                         | P2                   | P3		                              ;
*(u32 *)(r0 + 0) = 1 | r2 = *(u32 *)(r0 + 0)                     | *(u32 *)(r1 + 0) = 1 | r2 = *(u32 *)(r1 + 0)                       ;
                     | r6 = atomic_fetch_add((u64*)(r5 + 0), r6) |                      | r6 = atomic_fetch_add((u64*)(r5 + 0), r6)   ;
                     | r3 = *(u32 *)(r1 + 0)                     |                      | r3 = *(u32 *)(r0 + 0)                       ;


exists (1:r2=1 /\ 1:r3=0 /\ 3:r2=1 /\ 3:r3=0)
