BPF C-LB-GWR+R-A+OB-O+R-A+OB-OB-BPF
(*
 *  * Result: Never
 *  * 
 *  *
 *  * 0:-tmp- -> 0:r1
 *  * 1:r1 -> 1:r1
 *  * 1:-tmp- -> 1:r2
 *  * 2:r1 -> 2:r1
 *  * 2:-tmp- -> 2:r2
 *  * 3:r1 -> 3:r1
 *  * 3:-tmp- -> 3:r2
 *  * 4:r1 -> 4:r1
 *  * 4:-tmp- -> 4:r2
 *  * 4:r2 -> 4:r3
 *  * 5:-tmp- -> 5:r1
 *  * 5:r2 -> 5:r2
 *)
{
	0:r10 = u0;
	0:r9 = x1;
	1:r10 = x1;
	1:r9 = x2;
	1:r8 = __temporary_1;
	2:r10 = x2;
	2:r9 = x3;
	3:r10 = x3;
	3:r9 = x4;
	3:r8 = __temporary_3;
	4:r10 = v0;
	4:r9 = x4;
	4:r8 = __temporary_4;
	5:r10 = u0;
	5:r9 = v0;
	5:r8 = __temporary_5;
}
 P0                                 | P1                                        | P2                                 | P3                                        | P4                                        | P5                                        ;
 *(u32 *)(r10 + 0) = 3              | r1 = load_acquire((u32 *)(r10 + 0))       | r1 = *(u32 *)(r10 + 0)             | r1 = load_acquire((u32 *)(r10 + 0))       | r1 = *(u32 *)(r9 + 0)                     | *(u32 *)(r9 + 0) = 1                      ;
 r1 = 1                             | r2 = atomic_fetch_add((u64*)(r8 + 0), r2) | r2 = 1                             | r2 = atomic_fetch_add((u64*)(r8 + 0), r2) | r2 = atomic_fetch_add((u64*)(r8 + 0), r2) | r1 = atomic_fetch_add((u64*)(r8 + 0), r1) ;
 store_release((u32 *)(r9 + 0), r1) | *(u32 *)(r9 + 0) = 1                      | store_release((u32 *)(r9 + 0), r2) | *(u32 *)(r9 + 0) = 1                      | r3 = *(u32 *)(r10 + 0)                    | r2 = *(u32 *)(r10 + 0)                    ;
exists
((4:r3=0 /\ 5:r2=0 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1))
