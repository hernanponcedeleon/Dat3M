BPF C-LB-LRR+R-A+R-A+R-A+R-A-BPF
(*
 *  * Result: Never
 *  * 
 *  *
 *  * 0:r1 -> 0:r1
 *  * 0:-tmp- -> 0:r2
 *  * 1:r1 -> 1:r1
 *  * 1:-tmp- -> 1:r2
 *  * 2:r1 -> 2:r1
 *  * 2:-tmp- -> 2:r2
 *  * 3:r1 -> 3:r1
 *  * 3:-tmp- -> 3:r2
 *  * 4:r1 -> 4:r1
 *  * 4:r2 -> 4:r2
 *)
{
	0:r10 = u0;
	0:r9 = x1;
	1:r10 = x1;
	1:r9 = x2;
	2:r10 = x2;
	2:r9 = x3;
	3:r10 = x3;
	3:r9 = x4;
	4:r10 = x4;
	4:r9 = u0;
	5:r10 = u0;
}
 P0                                 | P1                                  | P2                                  | P3                                  | P4                                  | P5                    ;
 r1 = *(u32 *)(r10 + 0)             | r1 = load_acquire((u32 *)(r10 + 0)) | r1 = load_acquire((u32 *)(r10 + 0)) | r1 = load_acquire((u32 *)(r10 + 0)) | r1 = load_acquire((u32 *)(r10 + 0)) | *(u32 *)(r10 + 0) = 1 ;
 r2 = 1                             | r2 = 1                              | r2 = 1                              | r2 = 1                              | r2 = *(u32 *)(r9 + 0)               |                       ;
 store_release((u32 *)(r9 + 0), r2) | store_release((u32 *)(r9 + 0), r2)  | store_release((u32 *)(r9 + 0), r2)  | store_release((u32 *)(r9 + 0), r2)  |                                     |                       ;
exists
((0:r1=1 /\ 4:r2=0 /\ 1:r1=1 /\ 2:r1=1 /\ 3:r1=1 /\ 4:r1=1))
