C global_barrier

(*
 * https://github.com/herd/legacy/blob/master/herdtools/herd/testsuite/OpenCLTests/global_barrier_mo.litmus
 *)

{
  [f0] = 0;
  [f1] = 0;
  [g0] = 0;
  [g1] = 0;
}

P0@wg 0, dev 0 (global int* f0, global int* f1, global int* g0, global int* g1) { // slave wg0, wi0
  B1: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(f0, 1, memory_order_release);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r2 = atomic_load_explicit(g0, memory_order_acquire);

  B3: barrier(CLK_GLOBAL_MEM_FENCE);
}

P1@wg 0, dev 0 (global int* f0, global int* f1, global int* g0, global int* g1) { // slave wg0, wi1
  B1: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  B3: barrier(CLK_GLOBAL_MEM_FENCE);

}

P2@wg 1, dev 0 (global int* f0, global int* f1, global int* g0, global int* g1) { // master wg, wi0

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r0 = atomic_load_explicit(f0, memory_order_acquire);

  B2: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(g0, 1, memory_order_release);
}

P3@wg 1, dev 0 (global int* f0, global int* f1, global int* g0, global int* g1) { // master wg, wi1

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r1 = atomic_load_explicit(f1, memory_order_acquire);

  B2: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(g1, 1, memory_order_release);
}



P4@wg 2, dev 0 (global int* f0, global int* f1, global int* g0, global int* g1) { // slave wg1, wi0
  B11: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_store_explicit(f1, 1, memory_order_release);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  int r4 = atomic_load_explicit(g1, memory_order_acquire);

  B31: barrier(CLK_GLOBAL_MEM_FENCE);
}

P5@wg 2, dev 0 (global int* f0, global int* f1, global int* g0, global int* g1) { // slave wg1, wi1
  B11: barrier(CLK_GLOBAL_MEM_FENCE);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  atomic_work_item_fence(CLK_LOCAL_MEM_FENCE, memory_order_relaxed, memory_scope_work_group);

  B31: barrier(CLK_GLOBAL_MEM_FENCE);

}

exists (2:r0=1 /\ 3:r1=1 /\ 0:r2=1 /\ 4:r4=1 )