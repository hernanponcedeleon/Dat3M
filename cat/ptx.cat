PTX
(* NVIDIA. Parallel Thread Execution ISA Version 6.0 *)

(*******************)
(*   Auxiliaries   *)
(*******************)
(* Events *)
let strong-write = W & (RLX | REL | IW)
let strong-read = R & (RLX | ACQ)
let strong-m = strong-write | strong-read
let strong-operation = strong-write | strong-read | F

(* Relations *)
let sr-fence = ([strong-operation]; sr; [F]) | ([F]; sr; [strong-operation])
let po-fence = ([strong-operation]; po; [F]) | ([F]; po; [strong-operation])
let sr-m = ([strong-m]; (sr & loc); [strong-m])
let po-m = ([M]; po-loc; [M])
let morally-strong = sr-fence | po-fence | sr-m | po-m

let fence-sc = [F & SC] ; sr; [F & SC]
let rec observation = (morally-strong & rf) | (observation; rmw; observation)
let release-pattern = ([W & REL]; po-loc?; [strong-write]) | ([F & ACQ_REL]; po+; [strong-write])
let acquire-pattern = ([strong-read]; po-loc?; [R & ACQ]) | ([strong-read]; po+; [F & ACQ_REL])
let sw = morally-strong & (release-pattern; observation+; acquire-pattern) | fence-sc
let cause-base = (po?; sw; po?)+
let cause = cause-base | (observation; (cause-base | po-loc))

(******************************)
(*  PTX Memory Model Axioms   *)
(******************************)

(* Axiom 1 Coherence *)
let cause-write = [W]; (cause & loc); [W]
empty (cause-write \ co) as axiom-Coherence

(* Axiom 2 FenceSC *)
irreflexive (fence-sc ; cause) as axiom-FenceSC

(* Axiom 3 Atomicity *)
empty (((morally-strong & fr); (morally-strong & co)) & rmw) as axiom-Atomicity

(* Axiom 4 No-Thin-Air *)
let dep = addr | data | ctrl
acyclic (rf | dep) as axiom-NoThinAir

(* Axiom 5 SC-per-Location *)
acyclic ((morally-strong & (rf | co | fr)) | po-loc) as axiom-ScPerLocation

(* Axiom 6 Causality *)
irreflexive ((rf | fr); cause) as axiom-Causality

// Definition of paper: A Formal Analysis of the NVIDIA PTX Memory Consistency Model (NVIDIA 2019)
// let release-pattern = ([W & REL]; po-loc?; [W]) | ([F & ACQ_REL]; po; [W])
// let acquire-pattern = ([R]; po-loc?; [R & ACQ]) | ([R]; po; [F & ACQ_REL])