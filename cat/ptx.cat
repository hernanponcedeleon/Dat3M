PTX
(* NVIDIA. Parallel Thread Execution ISA Version 7.5 *)

(*******************)
(*   Auxiliaries   *)
(*******************)
(* Events *)
let strong-write = W & (RLX | REL)
let strong-read = R & (RLX | ACQ)
let strong-m = strong-write | strong-read
let strong-operation = strong-write | strong-read | F

(* Proxy *)
let generic-proxy = GEN * GEN
let surface-proxy = SUR * SUR
let texture-proxy = TEX * TEX
let constant-proxy = CON * CON
let same-proxy = generic-proxy | surface-proxy | texture-proxy | constant-proxy

(* Relations *)
let sr-fence = ([strong-operation]; (sr & same-proxy); [F]) | ([F]; (sr & same-proxy); [strong-operation])
let po-fence = ([strong-operation]; (po & same-proxy); [F]) | ([F]; (po & same-proxy); [strong-operation])
let sr-m = ([strong-m]; (sr & loc & same-proxy); [strong-m])
let po-m = ([M]; (po & loc & same-proxy); [M])
let morally-strong = sr-fence | po-fence | sr-m | po-m

let po-vloc = (alias+ | loc) & po
let fence-sc = [F & SC] ; sr; [F & SC]
let rec observation = (morally-strong & rf) | (observation; rmw; observation)
let release-pattern = ([W & REL]; po-vloc?; [W]) | ([F & ACQ_REL]; po+; [W])
let acquire-pattern = ([R]; po-vloc?; [R & ACQ]) | ([R]; po+; [F & ACQ_REL])
let sw = morally-strong & (release-pattern; observation+; acquire-pattern) | fence-sc
let cause-base = (po?; sw; po?)+ | po

(* Proxy-aware causality ordering *)
let generic-cause = [GEN]; (loc & cause-base); [GEN]
let scta-cause = same-proxy & scta & loc & cause-base
let alias-cause = loc & ([GEN]; (cause-base; [F & ALIAS]; cause-base); [GEN])

let cause-proxy = generic-cause | scta-cause | alias-cause
let cause = cause-proxy | (observation; cause-proxy)

(******************************)
(*  PTX Memory Model Axioms   *)
(******************************)
let ifr = fr | ([R]; (loc | alias); [IW])

(* Axiom 1 Coherence *)
let cause-write = [W]; (cause & loc); [W]
empty (cause-write \ co) as axiom-Coherence

(* Axiom 2 FenceSC *)
irreflexive (fence-sc ; cause) as axiom-FenceSC

(* Axiom 3 Atomicity *)
empty (((morally-strong & ifr); (morally-strong & co)) & rmw) as axiom-Atomicity

(* Axiom 4 No-Thin-Air *)
let dep = addr | data | ctrl
acyclic (rf | dep) as axiom-NoThinAir

(* Axiom 5 SC-per-Location *)
acyclic ((morally-strong & (rf | co | ifr)) | po-vloc) as axiom-ScPerLocation

(* Axiom 6 Causality *)
irreflexive ((rf | ifr)?; cause) as axiom-Causality