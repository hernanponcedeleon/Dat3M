PTX
(* NVIDIA. Parallel Thread Execution ISA Version 7.5 *)

// Base relations:
// sr: same-scope
// scta: same-cta

// Comparing to the model written in Alloy(https://github.com/NVlabs/mixedproxy)
// 1. The proxy alloy model uses rf | fr | co in the axiom-Causality (irreflexive ((rf | co | fr)?; cause)),
//    while both the original (proxy-less) alloy model and the documentation use rf | fr. We follow the documentation.
// 2. acquire-pattern: There is a comment in the alloy saying A Read followed by an AcquireFence (or greater).
//    But the model misses this. In contrast, the original (proxy-less) does include it in the acquire-pattern.
//    However, both two alloy models does not align precisely with the documentation. The documentation specifies that
//    the first Read in the pattern should be a strong Read, which is not explicitly enforced in both alloy models.
//    We follow the documentation here.

(*******************)
(*   Auxiliaries   *)
(*******************)

(* Events *)
let strong-write = W & (RLX | REL)
let strong-read = R & (RLX | ACQ)
let strong-m = strong-write | strong-read
let strong-operation = strong-m | F

(* Proxy *)
let same-proxy = GEN * GEN | SUR * SUR | TEX * TEX | CON * CON

(* Relations *)
let sr-fence = ([strong-operation]; (sr & same-proxy); [F]) | ([F]; (sr & same-proxy); [strong-operation])
let po-fence = ([strong-operation]; (po & same-proxy); [F]) | ([F]; (po & same-proxy); [strong-operation])
let sr-m = ([strong-m]; (sr & loc & same-proxy); [strong-m])
let po-m = ([M]; (po & loc & same-proxy); [M])
let morally-strong = sr-fence | po-fence | sr-m | po-m
let fence-sc = [F & SC] ; sr; [F & SC]

// this is equivalent to let rec observation = (morally-strong & rf) | (observation; rmw; observation)
let observation = (morally-strong & rf) | rmw

// The definition of alloy: let release-pattern = ([W & REL]; po-loc?; [W]) | ([F & ACQ_REL]; po; [W])
let release-pattern = ([W & REL]; po-loc?; [strong-write]) | ([F & ACQ_REL]; po; [strong-write])

// The definition of alloy: let acquire-pattern = ([R]; po-loc?; [R & ACQ])
let acquire-pattern = ([strong-read]; po-loc?; [R & ACQ]) | ([strong-read]; po; [F & ACQ_REL])

let sync = morally-strong & (release-pattern; observation+; acquire-pattern)
let cause-base = (po*; ((sync | fence-sc); po*)+) | po

(*******************)

(* Proxy-aware causality ordering *)
let proxy-fence-ops = [F]; (same-proxy & scta); [M]
let proxy-preserved-cause-base
                = ([GEN]; (loc & cause-base); [GEN])
                | ([M]; (same-proxy & scta & loc & cause-base); [M])
                | loc & (cause-base & (proxy-fence-ops^-1); cause-base; [GEN])
                | loc & ([GEN]; cause-base; cause-base & proxy-fence-ops)
                | loc & (cause-base & (proxy-fence-ops^-1); cause-base; cause-base & proxy-fence-ops)
                // The alloy model does not support the constant proxy below
                | alias & ([M & CON]; cause-base; [F & CON]; cause-base; [M & CON]) 
                | alias & ([GEN]; cause-base; [F & ALIAS]; cause-base; [GEN])
                | alias & (cause-base & (proxy-fence-ops^-1); cause-base; [F & ALIAS]; cause-base; [GEN])
                | alias & ([GEN]; cause-base; [F & ALIAS]; cause-base; cause-base & proxy-fence-ops)
                | alias & (cause-base & (proxy-fence-ops^-1); cause-base; [F & ALIAS]; cause-base; cause-base & proxy-fence-ops)
let cause = observation?; proxy-preserved-cause-base

(******************************)
(*  PTX Memory Model Axioms   *)
(******************************)

(* Axiom 1 Coherence *)
let cause-write = ([W]; cause ; [W]) & loc
empty (cause-write \ co) as axiom-Coherence

(* Axiom 2 FenceSC *)
//this is equivalent to irreflexive (fence-sc ; cause) as axiom-FenceSC
empty ([F & SC] ; cause; [F & SC] \ fence-sc) as axiom-FenceSC

(* Axiom 3 Atomicity *)
empty (((morally-strong & fr); (morally-strong & co)) & rmw) as axiom-Atomicity

(* Axiom 4 No-Thin-Air *)
let dep = addr | data | ctrl
acyclic (rf | dep) as axiom-NoThinAir

(* Axiom 5 SC-per-Location *)
// The alloy tool doesn't have this axiom
acyclic ((morally-strong & (rf | co | fr)) | po-loc) as axiom-ScPerLocation

(* Axiom 6 Causality *)
irreflexive ((rf | fr); cause) as axiom-Causality