OpenCL
(* OpenCL Memory Model *)

(*
* This model is based on:
* https://multicore.doc.ic.ac.uk/overhauling/opencl_base.cat
* https://multicore.doc.ic.ac.uk/overhauling/opencl.cat
*)

// Base relations:
// int: same work-item
// swg: same work-group
// sdv: same device
// syncbar: same barrier id

// Tags:
// WI: work-item scope
// WG: work-group scope
// DV: device scope
// ALL: all-svm-devices scope
// GLOBAL: global memory
// LOCAL: local memory
// EF: entry fence of barrier
// XF: exit fence of barrier

let mo = co & ((~NAL) * (~NAL))
let sb = po
let rb = (rf^-1; mo) \ id
let unv = ~0
let wi = int

(* Inclusive scopes *)
let incl = (swg & (WG * WG)) | (sdv & (DV * DV)) | (ALL * ALL)

(*******************)
(* Synchronisation *)
(*******************)

let Acq = (ACQ | SC | ACQ_REL) & (R | F)
let Rel = (REL | SC | ACQ_REL) & (W | F)

(* Fences sequenced before or after *)
let Fsb = [F]; sb
let sbF = sb; [F]

(* Release sequence *)
let rs_prime = wi | (unv; [R & W])
let rs = mo & rs_prime & ~((mo & ~rs_prime) ; mo)

(* Release-acquire synchronisation *)
let ra_sw(r) = ([r & Rel]; Fsb?; [W \ WI]; rs?; [r]; rf; [R \ WI]; sbF?; [Acq & r]) & incl & ~wi

(* Barrier synchronisation *)
// in OpenCL a barrier results in two fence operations: entry and exit fences:
// https://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_work_group_functions
let bar_sw(r) =  (EF * XF) & syncbar & ~wi & swg & (r * r)

(* Allowed to synchronise on the other region *)
let scf = (SC * SC) | ((GLOBAL & LOCAL & F) * (GLOBAL & LOCAL & F))

(* Global and local synchronises-with *)
let gsw = ra_sw(GLOBAL) | bar_sw(GLOBAL) | (scf & ra_sw(LOCAL))
let lsw = ra_sw(LOCAL) | bar_sw(LOCAL) | (scf & ra_sw(GLOBAL))

(******************)
(* Happens-before *)
(******************)

(* Global and local happens-before *)
let ghb = (((GLOBAL * GLOBAL) & (sb | (IW * ~IW))) | gsw)+
let lhb = (((LOCAL * LOCAL) & (sb | (IW * ~IW))) | lsw)+
irreflexive ghb as O-HbG
irreflexive lhb as O-HbL

(*************)
(* Coherence *)
(*************)

let coh(hb) = (rf^-1)?; mo; rf?; hb
irreflexive coh(ghb) as O-CohG
irreflexive coh(lhb) as O-CohL

(************************)
(* Consistency of reads *)
(************************)

(* A load can only read from a store that already happened. *)
irreflexive rf; (ghb | lhb) as O-Rf

(* Visible side effects *)
let vis(hb) = (W * R) & hb & loc & ~((hb & loc); [W]; hb)

(* A non-atomic load can only read from a store that is visible. *)
empty (rf; [NAL & GLOBAL])\vis(ghb) as O-NaRfG
empty (rf; [NAL & LOCAL])\vis(lhb) as O-NaRfL

(* Consistency of RMWs *)
irreflexive rf | (mo;mo;rf^-1) | (mo;rf) as O-Rmw

(**************************************)
(* Sequential consistency, simplified *)
(**************************************)
let scp = Fsb?; (rb | mo | (ghb | lhb)); sbF?
let S_cond1 = ~(unv; [SC \ ALL]; unv)
let S_cond2 = ~(unv; [SC \ DV]; unv)
acyclic (SC*SC) & scp & (S_cond1|S_cond2) as O-Ssimp

(***************)
(*    Races    *)
(***************)

let cnf = ((W * W) | (W * R) | (R * W)) & loc

let dr = cnf & ~(ghb | lhb) & ~(ghb | lhb)^-1 & ~wi & ~incl
flag ~empty dr as data_race

(* Barrier divergence *)
let bsw = bar_sw(GLOBAL) | bar_sw(LOCAL)
let bd = [EF] & ((~wi & swg); unv) \ (bsw ; unv)
flag ~empty bd as barrier_divergence