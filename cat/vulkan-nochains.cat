VULKAN
(* Vulkan Memory Model *)
(* With availability-visibility chains unsupported *)

// Base relations:
// vloc: events accessing the same virtual location, aka "same reference (sref)" in the Vulkan spec
// syncbar: synchronize by barriers with same logical barrier resource (barID)
// ssg: same subgroup
// swg: same workgroup
// sqf: same queuefamily
// ssw: system-synchronizes-with

// Tags:
// SC0, SC1: storage class 0, 1
// SEMSC0, SEMSC1: storage class semantics 0. 1
// SG, WG, QF, DV: subgroup, workgroup, queuefamily, device domains
// AV, VIS: availability, visibility
// AVDEVICE, VISDEVICE: availability, visibility op to the device domain

(*******************)
(*  Auxiliaries *)
(*******************)

(* Tags *)
let PRIV = (R | W) \ NONPRIV // PRIV is the complement of NONPRIV

let SEMSC01 = SEMSC0 & SEMSC1

let AVSHADER = (AV | SEMAV) & DV
let VISSHADER = (VIS | SEMVIS) & DV

let AVQF = (AV | SEMAV) & (DV | QF)
let VISQF = (VIS | SEMVIS) & (DV | QF)

let AVWG = (AV | SEMAV) & (DV | QF | WG)
let VISWG = (VIS | SEMVIS) & (DV | QF | WG)

let AVSG = AV | SEMAV
let VISSG = VIS | SEMVIS

(* Relations *)
let inscope = (DV * DV) |
              (sqf & ((DV | QF) * (DV | QF))) |
              (swg & ((DV | QF | WG) * (DV | QF | WG))) |
              (ssg & ((DV | QF | WG | SG) * (DV | QF | WG | SG)))

// mutually ordered atomics
let mutordatom = (loc & vloc & inscope & (ATOM * ATOM)) \ id

let avvisSem = ((SC0 | SC1) * AVDEVICE) | (VISDEVICE * (SC0 | SC1)) |
               (SC0 * (SEMSC0 & SEMAV)) | (SC1 * (SEMSC1 & SEMAV)) |
               ((SEMSC0 & SEMVIS) * SC0) | ((SEMSC1 & SEMVIS) * SC1)
let avvisSet = [AV | VIS]; (vloc & loc)
let avvisinc = avvisSem | avvisSet | avvisSet^-1

let posctosem = ((SC0 * SEMSC0) | (SC1 * SEMSC1)) & po
let posemtosc = ((SEMSC0 * SC0) | (SEMSC1 * SC1)) & po

let asmo = co & ((ATOM | IW) * ATOM) & mutordatom
let observation = rf & mutordatom

let imm(r) = r \ (r; r+)
let rs = [REL & ATOM]; (imm(asmo); [RMW])*
let hypors = [W & ATOM]; (imm(asmo); [RMW])*

let imm(r) = r \ (r; r+)
// TODO 1: Can it be replaced by:
// let rs = ([REL] ; posemtosc? ; [W & ATOM]); (imm(asmo); [RMW])*
// TODO 2: What if rmw is not inscope with the other accesses in the chain?
let rels = ([REL & ATOM] | ([REL & F]; posemtosc; [W & ATOM])); (imm(asmo); [RMW])*
let acqs = [ACQ & ATOM] | ([ATOM & R]; posctosem; [ACQ & F])

let swra = rels; (rf & mutordatom); acqs
// TODO: Does it mean that this also synchronises: Fsemsc0 -> Bsemsc1 -> Bsemsc1 -> Fsemsc0 ?
let swbar = [REL & F]; po?; ((syncbar & inscope) \ id); po?; [ACQ & F]
let sw = inscope & (swra | swbar)

let ithbsemsc0 = ( ssw |
                   ([SEMSC0]; sw; [SEMSC0]) |
                   ([SC0 | SEMSC0]; po; [REL & SEMSC0]) |
                   ([ACQ & SEMSC0]; po; [SC0 | SEMSC0])
                 )+
let ithbsemsc1 = ( ssw |
                   ([SEMSC1]; sw; [SEMSC1]) |
                   ([SC1 | SEMSC1]; po; [REL & SEMSC1]) |
                   ([ACQ & SEMSC1]; po; [SC1 | SEMSC1])
                 )+
let ithbsemsc01 = ( ssw |
                   ([SEMSC01]; sw; [SEMSC01]) |
                   ([SC0 | SC1 | SEMSC01]; po; [REL & SEMSC01]) |
                   ([ACQ & SEMSC01]; po; [SC0 | SC1 | SEMSC01])
                 )+

// happens-before
let hb = (observation? ; (ithbsemsc0 | ithbsemsc1 | ithbsemsc01)) | observation | po

// chains will turn off nontrivial availability/visibility with this pattern:
let E = (M | F | CBAR | AVDEVICE | VISDEVICE) \ IW
let chains = [E]

let avsg = [AVSG]
let avwg = (chains & (avsg; (hb & ssg & avvisinc))?); [AVWG]
let avqf = (chains & ((avsg; (hb & ssg & avvisinc))? | (avwg; (hb & swg & avvisinc))?)); [AVQF]
let avsh = (chains & ((avsg; (hb & ssg & avvisinc))? | (avwg; (hb & swg & avvisinc))? | (avqf; (hb & sqf & avvisinc))?)); [AVSHADER]
let avdv = [AVDEVICE]

let vissg = [VISSG]
let viswg = [VISWG]; (chains & (((hb & ssg & avvisinc); vissg)?))
let visqf = [VISQF]; (chains & (((hb & swg & avvisinc) ; viswg)? | ((hb & ssg & avvisinc); vissg)?))
let vissh = [VISSHADER]; (chains & (((hb & sqf & avvisinc) ; visqf)? | ((hb & swg & avvisinc); viswg)? | ((hb & ssg & avvisinc); vissg)?))
let visdv = [VISDEVICE]

// loc order for events accessing the same memory location
let blocord = loc & (
    ([R & NONPRIV]; hb; [NONPRIV]) | // TODO: Isn't it too much guarantee without vloc?
    ([R]; ssw+; [R | W]) |
    ([W]; hb; [AVDEVICE]; hb; [W]) |
    ([W]; hb; [AVDEVICE]; hb; [VISDEVICE]; hb; [R]))

// loc order for events accessing the same virtual memory location
let vlocord = loc & vloc & (
    (hb & int) |
    ([W \ PRIV]; (po? & avvisinc); avsg; (hb & ssg);                          [W \ PRIV]) |   // WaW (via subgroup instance domain)
    ([W \ PRIV]; (po? & avvisinc); avsg; (hb & ssg); vissg; (po? & avvisinc); [R \ PRIV]) |   // RaW (via subgroup instance domain)
    ([W \ PRIV]; (po? & avvisinc); avwg; (hb & swg);                          [W \ PRIV]) |   // WaW (via subgroup instance domain)
    ([W \ PRIV]; (po? & avvisinc); avwg; (hb & swg); viswg; (po? & avvisinc); [R \ PRIV]) |   // RaW (via workgroup instance domain)
    ([W \ PRIV]; (po? & avvisinc); avqf; (hb & sqf);                          [W \ PRIV]) |   // WaW (via queue family instance domain)
    ([W \ PRIV]; (po? & avvisinc); avqf; (hb & sqf); visqf; (po? & avvisinc); [R \ PRIV]) |   // RaW (via queue family instance domain)
    ([W \ PRIV]; (po? & avvisinc); avsh; (hb);                                [W \ PRIV]) |   // WaW (via shader domain)
    ([W \ PRIV]; (po? & avvisinc); avsh; (hb);       vissh; (po? & avvisinc); [R \ PRIV]))    // RaW (via shader domain)

let locord = blocord | vlocord

// From-read is defined based on scoped modification order
// instead of coherence. For reads that read-from init, they
// from-read all writes at the same location.

// The definition of the original Vulkan model is too restrictive and forbids CoWW-RR
// let fr = (rf^-1 ; (W * W) & locord) | (rf^-1; asmo) | (([IW]; rf)^-1; ((loc;[W]) \ id))
let fr = ((rf & locord)^-1 ; (W * W) & locord) | (rf^-1; asmo) | (([IW]; rf)^-1; ((loc;[W]) \ id))
let fre = fr & ext

(***********************)
(* Memory Model Axioms *)
(***********************)

// locord, rf, fr, asmo must not form cycles
acyclic (locord | rf | fr | asmo) as consistency-cycle

// non-atomic cannot read-from a value that is shadowed by another write
empty (rf; ([R \ ATOM])) & (([W]; locord); ([W]; locord)+) as consistency-rf

// rmw events are atomic
empty rmw & (fre; (asmo & ext)) as atomic

(***************)
(* Data Races *)
(***************)

let pair_with_write = ((W * W) | (W * R) | (R * W)) \ ((IW * _) | (_ * IW)) // ignore IW
let dr = loc & (pair_with_write \ mutordatom \ id \ (locord | locord^-1))
flag ~empty dr as racy