(* CAT for IMM (as implemented by GenMC) *)

(*
 * GenMC does not follow the published IMM model to the letter
 * https://github.com/MPI-SWS/genmc/issues/44
 * It also uses part of RC11 to deal with SC accesses
 * According to Viktor Vafeiadis, this is a faithful model 
 * following GenMC's implementation
 *)

(* coherence *)
let rs = [W];po-loc;[W] | [W];(po-loc?;rf;rmw)*                                                                                     (* release sequence *)
(* GenMC uses the same sw definition as RC11 *)
let sw = [(REL | ACQ_REL | SC)]; ([F]; po)?; rs; rf; [R & (RLX | REL | ACQ | ACQ_REL | SC)]; (po; [F])?; [(ACQ | ACQ_REL | SC)]     (* synchronizes with *)
let hb = (po | sw)+                                                                                                                 (* happens-before *)
let eco = rf | co;(rf?) | fr;(rf?)                                                                                                  (* extended coherence order *)

irreflexive hb;(eco?)
(* alternative *)
(* acyclic ((hb & loc) | rf | co | fr) *)

(* atomicity *)
empty rmw & (fre;coe)

(* global ordering against OOTA*)

let bob = po;[W & (REL | SC)] | [R & (ACQ | SC)];po | po;[F] | [F];po | [W & (REL | SC)];po-loc;[W]                                 (* barrier order *)
let deps = data | ctrl | addr;(po?) | casdep | [R & RMW];po                                                                         (* syntactic dependencies *)
let ppo = [R];(deps | rfi)+;[W]                                                                                                     (* preserved program order *)
let detour = (coe;rfe) & po                                                                                                         (* detour *)
let psc = [F & SC];hb;eco;hb;[F & SC]                                                                                               (* partial SC fence order *)

(* GenMC guarantees SC for IMM similar to how it is done in RC11 *)
let pol = po \ loc
let hbl = hb & loc
let scb = po | pol; hb; pol | hbl | co | fr
let pscb = ([SC] | [F & SC]; hb?); scb; ([SC] | hb? ; [F & SC])
acyclic psc | pscb as SC

(* no OOTA *)
let ar = rfe | bob | ppo | detour | psc | [W & STRONG];po;[W]
acyclic ar
