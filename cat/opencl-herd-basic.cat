OpenCL
(* OpenCL Memory Model *)

(*
* This model is based on:
* https://github.com/herd/herdtools7/blob/master/herd-www/cat_includes/opencl_base.cat
*)

// Base relations:
// int: same work-item
// swg: same work-group
// sdv: same device
// syncbar: same barrier id

// Tags:
// WI: work-item scope
// WG: work-group scope
// DV: device scope
// ALL: all-svm-devices scope
// GLOBAL: global memory
// LOCAL: local memory
// EF: entry fence of barrier
// XF: exit fence of barrier

include "basic.cat"

let symm(r) = r | r^-1
let wi = int

(* Inclusive scopes *)
let incl = (wi & (WI * WI)) |
    (swg & (WG * WG)) |
    (sdv & (DV * DV)) |
    (ALL * ALL)

(*******************)
(* Synchronisation *)
(*******************)

let Acq = (ACQ | SC | ACQ_REL) & (R | F | RMW)
let Rel = (REL | SC | ACQ_REL) & (W | F | RMW)

(* Release sequence *)
let rs = (_ * RMW) | wi
let max_co = co? & rs & ~((co & ~rs) ; co)

(* Including release-acquire fences *)
let relf = [Rel]; ([F]; po)?; [A & W]
let acqf = [A & R]; (po; [F])?; [Acq]

(* Release-acquire synchronisation *)
let ra_sw(r) = incl & ~wi & ([r]; relf; max_co; [r]; rf; acqf; [r])

(* Barrier synchronisation *)
// in OpenCL a barrier results in two fence operations: entry and exit fences:
// https://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_work_group_functions
let bar_sw(r) = (EF * XF) & syncbar & ~wi & swg & (r * r)

(* Synchronisation on a region *)
let region_sw(r) = ra_sw(r) | bar_sw(r)

(* Allowed to synchronise on the other region *)
let scf = (SC * SC) | ((GLOBAL & LOCAL & F) * (GLOBAL & LOCAL & F))

(* Global and local synchronises-with *)
let gsw = region_sw(GLOBAL) | (scf & region_sw(LOCAL))
let lsw = region_sw(LOCAL) | (scf & region_sw(GLOBAL))

(******************)
(* Happens-before *)
(******************)

(* Global and local happens-before *)
let ghb = (((GLOBAL * GLOBAL) & (po | (IW * ~IW))) | gsw)+
let lhb = (((LOCAL * LOCAL) & (po | (IW * ~IW))) | lsw)+

acyclic ghb as global_hb_acyclic
acyclic lhb as local_hb_acyclic

(* Per-location happens-before *)
let ghbl = ghb & loc
let lhbl = lhb & loc

(*************)
(* Coherence *)
(*************)

let coh_hb_g = (rf^-1)?; co; rf?; ghb
let coh_hb_l = (rf^-1)?; co; rf?; lhb
irreflexive coh_hb_g as global_coherence
irreflexive coh_hb_l as local_coherence

(************************)
(* Consistency of reads *)
(************************)

(* Visible side effects *)
let vse(hbl) = (W * R) & hbl & ~(hbl; [W]; hbl)
let gvse = [GLOBAL]; vse(ghbl)
let lvse = [LOCAL]; vse(lhbl)

(* A non-atomic load can only read from a store that is visible. *)
irreflexive rf; [NAL & GLOBAL]; ~(gvse^-1) as global_nonatomic_rf_consistent
irreflexive rf; [NAL & LOCAL]; ~(lvse^-1) as local_nonatomic_rf_consistent

(* An atomic load can only read from a store that already happened. *)
irreflexive (ghb | lhb); rf; [A] as atomic_rf_consistent

(* Consistency of RMWs *)
irreflexive rf | (fr;co) | (co;rf) as rmw_consistent

// Atomicity
empty rmw & (fre; coe) as atomic