PTX
(* NVIDIA. Parallel Thread Execution ISA Version 6.0 *)

// Base relations:
// sr: same-scope
// scta: same-cta
// sync_bar: synchronize by barriers with same logical barrier resource (barID)

// Comparing to the ptx-v6.0 model written in Alloy (https://github.com/NVlabs/ptxmemorymodel)
// The alloy model does not align precisely with the documentation in the Acquire-pattern
// and Release-pattern. The documentation specifies that the first read in the pattern
// should be a strong one. Also in the Release-pattern, the documentation specifies that
// the second write in the pattern should be a strong one. We follow the documentation
// for both patterns here.

(*******************)
(*   Auxiliaries   *)
(*******************)

(* Events *)
let strong-write = W & (RLX | REL | IW)
let strong-read = R & (RLX | ACQ)
let strong-m = strong-write | strong-read
let strong-operation = strong-m | F

(* Relations *)
let sr-fence = ([strong-operation]; sr; [F]) | ([F]; sr; [strong-operation])
let po-fence = ([strong-operation]; po; [F]) | ([F]; po; [strong-operation])
let sr-m = ([strong-m]; (sr & loc); [strong-m])
let po-m = ([M]; po-loc; [M])
let morally-strong = sr-fence | po-fence | sr-m | po-m
let fence-sc = [F & SC] ; sr; [F & SC]
let sync-barrier = [BAR_BEFORE]; (po | (sync_bar & scta)); [BAR_AFTER]

// The ASPLOS'19 paper uses the definition below
// let rec observation = (morally-strong & rf) | (observation; rmw; observation)
// but the ISCA'22 paper claims the one below is equivalent, thus we avoid the recursion
let observation = (morally-strong & rf) | rmw

// The definition of alloy: let release-pattern = ([W & REL]; po-loc?; [W]) | ([F & ACQ_REL]; po; [W])
// However the documentation states that the second store shall be strong one
let release-pattern = ([W & REL]; po-loc?; [strong-write]) | ([F & ACQ_REL]; po; [strong-write])

// The definition of alloy: let acquire-pattern = ([R]; po-loc?; [R & ACQ])
// However the documentation states that the first read shall be strong one
let acquire-pattern = ([strong-read]; po-loc?; [R & ACQ]) | ([strong-read]; po; [F & ACQ_REL])

let sw = (morally-strong & (release-pattern; observation; acquire-pattern)) | fence-sc | sync-barrier
let cause-base = (po?; sw; po?)+
let cause = cause-base | (observation; (cause-base | po-loc))

(******************************)
(*  PTX Memory Model Axioms   *)
(******************************)

(* Axiom 1 Coherence *)
let cause-write = ([W]; cause ; [W]) & loc
empty (cause-write \ co) as axiom-Coherence

(* Axiom 2 FenceSC *)
// This is equivalent to: irreflexive (fence-sc ; cause) as axiom-FenceSC
empty ([F & SC] ; cause; [F & SC] \ fence-sc) as axiom-FenceSC

(* Axiom 3 Atomicity *)
empty (((morally-strong & fr); (morally-strong & co)) & rmw) as axiom-Atomicity

(* Axiom 4 No-Thin-Air *)
let dep = addr | data | ctrl
acyclic (rf | dep) as axiom-NoThinAir

(* Axiom 5 SC-per-Location *)
acyclic ((morally-strong & (rf | co | fr)) | po-loc) as axiom-ScPerLocation

(* Axiom 6 Causality *)
irreflexive ((rf | fr); cause) as axiom-Causality