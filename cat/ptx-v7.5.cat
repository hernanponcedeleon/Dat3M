PTX
(* NVIDIA. Parallel Thread Execution ISA Version 7.5 *)

// Base relations:
// vloc: virtual address mapping to the same generic address
// sr: same-scope
// scta: same-cta
// sync_barrier: synchronize by barriers with same logical barrier resource (barID)
// sync_fence: synchronize by morally strong fence.sc

// Scope Tags:
// CTA: Cooperative thread array, is an array of threads that execute a kernel concurrently or in parallel.
//      The CTA scope is the set of all threads executing in the same CTA as the current thread.
// GPU: Graphics processing unit. The GPU scope is the set of all threads executing in the same cluster as the current thread.
// SYS: System. The SYS scope is the set of all threads in the current program.

// Proxy Tags:
// GEN: Generic memory space, this is the memory space that proxy-less PTX memory model(ptx-v6.0) applies to.
// SUR: Surface memory, used by graphics workloads
// TEX: Texture memory, used by graphics workloads
// CON: Constant memory, is a small, distinct address space reserved to hold fixed values.

// Comparing to the ptx-v7.5 model written in Alloy (https://github.com/NVlabs/mixedproxy)
// The ptx-v7.5 alloy model uses this Causality-axiom "irreflexive ((rf | co | fr)?; cause)".
// The ptx-v6.0 alloy model uses "irreflexive ((rf | fr)?; cause)".
// The ASPLOS'19 paper and the documentation refer to "rf | fr" (non-optional). 
// We follow the later.

(*******************)
(*   Auxiliaries   *)
(*******************)

(* Events *)
let strong-write = W & (RLX | REL)
let strong-read = R & (RLX | ACQ)
let strong-m = strong-write | strong-read
let strong-operation = strong-m | F

(* Proxy *)
let same-proxy = GEN * GEN | SUR * SUR | TEX * TEX | CON * CON
let po-vloc = po & vloc

(* Relations *)
let sr-fence = ([strong-operation]; (sr & same-proxy); [F]) | ([F]; (sr & same-proxy); [strong-operation])
let po-fence = ([strong-operation]; (po & same-proxy); [F]) | ([F]; (po & same-proxy); [strong-operation])
let sr-m = ([strong-m]; (sr & vloc & same-proxy); [strong-m])
let po-m = ([M]; (po & vloc & same-proxy); [M])
let morally-strong = sr-fence | po-fence | sr-m | po-m

// This is probably equivalent to 
// let rec observation = (morally-strong & rf) | (observation; rmw; observation)
// We opt to avoid the recursion
let observation = (morally-strong & rf) | rmw

let release-pattern = ([W & REL]; po-vloc?; [strong-write]) | ([F & ACQ_REL]; po; [strong-write])

let acquire-pattern = ([strong-read]; po-vloc?; [R & ACQ]) | ([strong-read]; po; [F & ACQ_REL])

let sync = morally-strong & (release-pattern; observation; acquire-pattern)
let cause-base = (po?; ((sync | sync_fence | sync_barrier); po?)+) | po

(*******************)

(* Proxy-aware causality ordering *)
let proxy-fence-ops = [F]; (same-proxy & scta); [M]
let proxy-preserved-cause-base
                = ([GEN]; (vloc & cause-base); [GEN])
                | ([M]; (same-proxy & scta & vloc & cause-base); [M])
                | vloc & (cause-base & (proxy-fence-ops^-1); cause-base; [GEN])
                | vloc & ([GEN]; cause-base; cause-base & proxy-fence-ops)
                | vloc & (cause-base & (proxy-fence-ops^-1); cause-base; cause-base & proxy-fence-ops)
                // The alloy model does not support the constant proxy below
                | loc & ([M & CON]; cause-base; [F & CON]; cause-base; [M & CON])
                | loc & ([GEN]; cause-base; [F & ALIAS]; cause-base; [GEN])
                | loc & (cause-base & (proxy-fence-ops^-1); cause-base; [F & ALIAS]; cause-base; [GEN])
                | loc & ([GEN]; cause-base; [F & ALIAS]; cause-base; cause-base & proxy-fence-ops)
                | loc & (cause-base & (proxy-fence-ops^-1); cause-base; [F & ALIAS]; cause-base; cause-base & proxy-fence-ops)
let cause = observation?; proxy-preserved-cause-base

(******************************)
(*  PTX Memory Model Axioms   *)
(******************************)

(* Axiom 1 Coherence *)
let cause-write = ([W]; cause; [W]) & loc
empty (cause-write \ co) as axiom-Coherence

(* Axiom 2 FenceSC *)
// This is equivalent to: irreflexive (sync_fence ; cause) as axiom-FenceSC
empty (([F & SC]; cause; [F & SC]) \ sync_fence) as axiom-FenceSC

(* Axiom 3 Atomicity *)
empty (((morally-strong & fr); (morally-strong & co)) & rmw) as axiom-Atomicity

(* Axiom 4 No-Thin-Air *)
let dep = addr | data | ctrl
acyclic (rf | dep) as axiom-NoThinAir

(* Axiom 5 SC-per-Location *)
// The ptx-v7.5 alloy model doesn't have this axiom because it is possible redundant
// due to the fact that po was added to cause-base
acyclic ((morally-strong & (rf | co | fr)) | po-loc) as axiom-ScPerLocation

(* Axiom 6 Causality *)
irreflexive ((rf | fr); cause) as axiom-Causality