ARM

(* Uniproc *)
acyclic po-loc | rf | fr | co as uniproc

(* Atomic *)
empty rmw & (fre; coe) as atomic

(* Utilities *)
let dd = addr | data
let rdw = po-loc & (fre; rfe)
let detour = po-loc & (coe; rfe)
let addrpo = addr; po

(*******)
(* ppo *)
(*******)

(* Fences *)
let dmb.st = po; [DMB.ST]; po
let dsb.st = po; [DSB.ST]; po
let dmb = po; [DMB]; po
let dmb.ish = po; [DMB.ISH]; po
let dsb = po; [DSB]; po
let isb = po; [ISB]; po

(* Initial value *)
let ci0 = (ctrl; [ISB]) | detour
let ii0 = dd | rfi | rdw
let cc0 = dd | ctrl | addrpo (* po-loc deleted *)
let ic0 = 0

(* Fixpoint from i -> c in instructions and transitivity *)
let rec ci = ci0 | (ci; ii) | (cc; ci)
and ii = ii0 | ci | (ic; ci) | (ii; ii)
and cc = cc0 | ci | (ci; ic) | (cc; cc)
and ic = ic0 | ii | cc | (ic; cc) | (ii; ic)

let ppo = (R*W & ic) | (R*R & ii)

(* ARM *)
let WW = W * W
let dmb.st = dmb.st & WW
let dsb.st = dsb.st & WW

(* Common, all arm barriers are strong *)
let strong = dmb | dsb | dmb.st | dsb.st | dmb.ish
let light = 0

let fence = strong | light

(* happens before *)
let hb = ppo | fence | rfe
acyclic hb as thinair

(* prop *)
let propbase = (fence | (rfe; fence)); hb*

let chapo = rfe | fre | coe | (fre; rfe) | (coe; rfe)

let prop = propbase & (W * W) | (chapo?; propbase*; strong; hb*)

acyclic co | prop as propagation
irreflexive fre; prop; hb* as observation
