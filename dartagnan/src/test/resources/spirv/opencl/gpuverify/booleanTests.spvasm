; @Config: 3, 1, 3
; SPIR-V
; Version: 1.0
; Generator: Khronos LLVM/SPIR-V Translator; 14
; Bound: 62
; Schema: 0
               OpCapability Addresses
               OpCapability Linkage
               OpCapability Kernel
               OpCapability Int8
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical32 OpenCL
               OpEntryPoint Kernel %10 "foo"
               OpExecutionMode %10 ContractionOff
               OpSource OpenCL_C 200000
               OpName %bar "bar"
               OpName %baz "baz"
               OpName %entry "entry"
               OpName %if_then "if.then"
               OpName %if_end "if.end"
               OpName %if_then8 "if.then8"
               OpName %if_end9 "if.end9"
               OpName %if_then11 "if.then11"
               OpName %if_end12 "if.end12"
               OpName %if_then14 "if.then14"
               OpName %if_end15 "if.end15"
               OpName %if_then16 "if.then16"
               OpName %if_end17 "if.end17"
               OpName %if_then19 "if.then19"
               OpName %if_end20 "if.end20"
               OpName %y "y"
               OpName %x "x"
               OpName %call "call"
               OpName %frombool "frombool"
               OpName %call1 "call1"
               OpName %tobool "tobool"
               OpName %lnot "lnot"
               OpName %lnot_ext "lnot.ext"
               OpName %tobool2 "tobool2"
               OpName %lnot3 "lnot3"
               OpName %frombool5 "frombool5"
               OpName %tobool6 "tobool6"
               OpName %tobool7 "tobool7"
               OpName %tobool10 "tobool10"
               OpName %tobool13 "tobool13"
               OpName %cmp "cmp"
               OpName %cmp18 "cmp18"
               OpDecorate %bar FuncParamAttr Zext
               OpDecorate %bar LinkageAttributes "bar" Import
               OpDecorate %baz LinkageAttributes "baz" Import
               OpDecorate %y Alignment 1
               OpDecorate %x Alignment 4
       %uint = OpTypeInt 32 0
      %uchar = OpTypeInt 8 0
    %uchar_0 = OpConstant %uchar 0
    %uchar_1 = OpConstant %uchar 1
     %uint_0 = OpConstant %uint 0
     %uint_1 = OpConstant %uint 1
       %bool = OpTypeBool
          %3 = OpTypeFunction %bool
          %6 = OpTypeFunction %uint
       %void = OpTypeVoid
          %9 = OpTypeFunction %void
%_ptr_Function_uchar = OpTypePointer Function %uchar
%_ptr_Function_uint = OpTypePointer Function %uint
       %true = OpConstantTrue %bool
        %bar = OpFunction %bool None %3
               OpFunctionEnd
        %baz = OpFunction %uint None %6
               OpFunctionEnd
         %10 = OpFunction %void DontInline %9
      %entry = OpLabel
          %y = OpVariable %_ptr_Function_uchar Function
          %x = OpVariable %_ptr_Function_uint Function
       %call = OpFunctionCall %bool %bar
   %frombool = OpSelect %uchar %call %uchar_1 %uchar_0
               OpStore %y %frombool Aligned 1
      %call1 = OpFunctionCall %uint %baz
               OpStore %x %call1 Aligned 4
         %34 = OpLoad %uint %x Aligned 4
     %tobool = OpINotEqual %bool %34 %uint_0
       %lnot = OpLogicalNotEqual %bool %tobool %true
   %lnot_ext = OpSelect %uint %lnot %uint_1 %uint_0
               OpStore %x %lnot_ext Aligned 4
         %41 = OpLoad %uchar %y Aligned 1
         %42 = OpBitwiseAnd %uchar %41 %uchar_1
    %tobool2 = OpINotEqual %bool %42 %uchar_0
      %lnot3 = OpLogicalNotEqual %bool %tobool2 %true
  %frombool5 = OpSelect %uchar %lnot3 %uchar_1 %uchar_0
               OpStore %y %frombool5 Aligned 1
         %46 = OpLoad %uint %x Aligned 4
    %tobool6 = OpINotEqual %bool %46 %uint_0
               OpBranchConditional %tobool6 %if_then %if_end
    %if_then = OpLabel
               OpBranch %if_end
     %if_end = OpLabel
         %48 = OpLoad %uint %x Aligned 4
    %tobool7 = OpINotEqual %bool %48 %uint_0
               OpBranchConditional %tobool7 %if_end9 %if_then8
   %if_then8 = OpLabel
               OpBranch %if_end9
    %if_end9 = OpLabel
         %50 = OpLoad %uchar %y Aligned 1
         %51 = OpBitwiseAnd %uchar %50 %uchar_1
   %tobool10 = OpINotEqual %bool %51 %uchar_0
               OpBranchConditional %tobool10 %if_then11 %if_end12
  %if_then11 = OpLabel
               OpBranch %if_end12
   %if_end12 = OpLabel
         %53 = OpLoad %uchar %y Aligned 1
         %54 = OpBitwiseAnd %uchar %53 %uchar_1
   %tobool13 = OpINotEqual %bool %54 %uchar_0
               OpBranchConditional %tobool13 %if_end15 %if_then14
  %if_then14 = OpLabel
               OpBranch %if_end15
   %if_end15 = OpLabel
         %56 = OpLoad %uint %x Aligned 4
         %57 = OpLoad %uint %x Aligned 4
        %cmp = OpSLessThan %bool %56 %57
               OpBranchConditional %cmp %if_then16 %if_end17
  %if_then16 = OpLabel
               OpBranch %if_end17
   %if_end17 = OpLabel
         %59 = OpLoad %uint %x Aligned 4
         %60 = OpLoad %uint %x Aligned 4
      %cmp18 = OpSLessThan %bool %59 %60
               OpBranchConditional %cmp18 %if_end20 %if_then19
  %if_then19 = OpLabel
               OpBranch %if_end20
   %if_end20 = OpLabel
               OpReturn
               OpFunctionEnd
