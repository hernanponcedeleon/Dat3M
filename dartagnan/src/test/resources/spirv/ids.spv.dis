; SPIR-V
; Version: 1.0
; Schema: 0
; @Input:  %ids_value = Vector {0, 1, 2}
; @Input:  %out_value = Vector {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
; @Output: forall (%out[0]==0 and %out[8]==0 and %out[16]==0 and %out[24]==1 and %out[32]==0 and %out[40]==0 and %out[48]==0 and %out[56]==1 and %out[64]==0 and %out[72]==1 and %out[80]==1 and %out[88]==0 and %out[96]==0 and %out[104]==0 and %out[112]==1 and %out[120]==1 and %out[128]==0 and %out[136]==1 and %out[144]==0 and %out[152]==1 and %out[160]==1 and %out[168]==1 and %out[176]==1 and %out[184]==1)
; @Config: 2, 2, 2
               OpCapability Shader
        %ext = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %ids
               OpSource GLSL 450
               OpDecorate %ids BuiltIn GlobalInvocationId
       %void = OpTypeVoid
       %func = OpTypeFunction %void
       %uint = OpTypeInt 64 0
     %v3uint = OpTypeVector %uint 3
     %v24uint = OpTypeVector %uint 24
 %ptr_v3uint = OpTypePointer Input %v3uint
%ptr_v24uint = OpTypePointer Output %v24uint
         %c0 = OpConstant %uint 0
         %c1 = OpConstant %uint 1
         %c2 = OpConstant %uint 2
         %c3 = OpConstant %uint 3
         %c4 = OpConstant %uint 4
        %ids = OpVariable %ptr_v3uint Input %ids_value
        %out = OpVariable %ptr_v24uint Output %out_value
       %main = OpFunction %void None %func
      %label = OpLabel
      %x_ptr = OpAccessChain %ptr_v3uint %ids %c0
      %y_ptr = OpAccessChain %ptr_v3uint %ids %c1
      %z_ptr = OpAccessChain %ptr_v3uint %ids %c2
      %x_val = OpLoad %uint %x_ptr
      %y_val = OpLoad %uint %y_ptr
      %z_val = OpLoad %uint %z_ptr
          %1 = OpIMul %uint %z_val %c4
          %2 = OpIMul %uint %y_val %c2
          %3 = OpIAdd %uint %1 %2
          %4 = OpIAdd %uint %3 %x_val
      %idx_x = OpIMul %uint %4 %c3
      %idx_y = OpIAdd %uint %idx_x %c1
      %idx_z = OpIAdd %uint %idx_x %c2
  %ptr_out_x = OpAccessChain %ptr_v3uint %out %idx_x
  %ptr_out_y = OpAccessChain %ptr_v3uint %out %idx_y
  %ptr_out_z = OpAccessChain %ptr_v3uint %out %idx_z
               OpStore %ptr_out_x %x_val
               OpStore %ptr_out_y %y_val
               OpStore %ptr_out_z %z_val
               OpReturn
               OpFunctionEnd
