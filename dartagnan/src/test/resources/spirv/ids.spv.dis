; TODO: Cleanup and add all three dimensions

; SPIR-V
; Version: 1.0
; Schema: 0
               OpCapability Shader
        %ext = OpExtInstImport "GLSL.std.450"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %main "main" %ids
               OpSource GLSL 450
               OpDecorate %ids BuiltIn GlobalInvocationId
       %void = OpTypeVoid
       %func = OpTypeFunction %void
       %uint = OpTypeInt 64 0

     %v3uint = OpTypeVector %uint 3
     %v6uint = OpTypeVector %uint 6
 %ptr_v3uint = OpTypePointer Input %v3uint
 %ptr_v6uint = OpTypePointer Input %v6uint

   %ptr_uint = OpTypePointer Output %uint
         %c0 = OpConstant %uint 0
         %c1 = OpConstant %uint 1
         %c2 = OpConstant %uint 2
         %c3 = OpConstant %uint 3
    %ids_value = OpConstantComposite %ptr_v3uint %c0 %c1 %c2
    %out_value = OpConstantComposite %ptr_v6uint %c0 %c0 %c0 %c0 %c0 %c0
        %ids = OpVariable %ptr_v3uint Input %ids_value
        %out = OpVariable %ptr_v6uint Output %out_value
       %main = OpFunction %void None %func
      %label = OpLabel
   %ptr_in_x = OpAccessChain %ptr_v3uint %ids %c0
   %ptr_in_y = OpAccessChain %ptr_v3uint %ids %c1
   %ptr_in_z = OpAccessChain %ptr_v3uint %ids %c2
      %val_x = OpLoad %uint %ptr_in_x
      %val_y = OpLoad %uint %ptr_in_y
      %val_z = OpLoad %uint %ptr_in_z
       %base = OpIMul %uint %val_x %c3
      %idx_x = OpIAdd %uint %base %c0
      %idx_y = OpIAdd %uint %base %c1
      %idx_z = OpIAdd %uint %base %c2
  %ptr_out_x = OpAccessChain %ptr_v3uint %out %idx_x
  %ptr_out_y = OpAccessChain %ptr_v3uint %out %idx_y
  %ptr_out_z = OpAccessChain %ptr_v3uint %out %idx_z
               OpStore %ptr_out_x %val_x
               OpStore %ptr_out_y %val_y
               OpStore %ptr_out_z %val_z
               OpReturn
               OpFunctionEnd
