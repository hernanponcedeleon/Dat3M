; @Input: %output = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
; @Output: forall (%output[0] == 0 and %output[1] == 2 and %output[2] == 0)
; @Output: forall (%output[3] == 7 and %output[4] == 7 and %output[5] == 5)
; @Output: forall (%output[6] == 7 and %output[7] == 5 and %output[8] == 5)
; @Output: forall (%output[9] == 7 and %output[10] == 9 and %output[11] == 5)
; @Output: forall (%output[12] == 0 and %output[13] == 18 and %output[14] == 4)
; @Config: 1, 1, 1
; SPIR-V
; Version: 1.0
; Schema: 0
                 OpCapability Shader
                 OpCapability VulkanMemoryModel
                 OpMemoryModel Logical Vulkan
                 OpEntryPoint GLCompute %main "main"
         %void = OpTypeVoid
         %func = OpTypeFunction %void
         %uint = OpTypeInt 32 0

       %uint_0 = OpConstant %uint 0
       %uint_1 = OpConstant %uint 1
       %uint_2 = OpConstant %uint 2
       %uint_3 = OpConstant %uint 3
       %uint_4 = OpConstant %uint 4
       %uint_5 = OpConstant %uint 5
       %uint_6 = OpConstant %uint 6
       %uint_7 = OpConstant %uint 7
       %uint_8 = OpConstant %uint 8
       %uint_9 = OpConstant %uint 9
       %uint_10 = OpConstant %uint 10
       %uint_11 = OpConstant %uint 11
       %uint_12 = OpConstant %uint 12
       %uint_13 = OpConstant %uint 13
       %uint_14 = OpConstant %uint 14

     %v3uint = OpTypeVector %uint 3
    %vector2 = OpConstantComposite %v3uint %uint_0 %uint_3 %uint_4

  %output_type = OpTypeRuntimeArray %uint
   %ptr_output = OpTypePointer Uniform %output_type
     %ptr_uint = OpTypePointer Uniform %uint
       %output = OpVariable %ptr_output Uniform

         %main = OpFunction %void None %func
        %label = OpLabel

     %output_0 = OpAccessChain %ptr_uint %output %uint_0
     %output_1 = OpAccessChain %ptr_uint %output %uint_1
     %output_2 = OpAccessChain %ptr_uint %output %uint_2
     %output_3 = OpAccessChain %ptr_uint %output %uint_3
     %output_4 = OpAccessChain %ptr_uint %output %uint_4
     %output_5 = OpAccessChain %ptr_uint %output %uint_5
     %output_6 = OpAccessChain %ptr_uint %output %uint_6
     %output_7 = OpAccessChain %ptr_uint %output %uint_7
     %output_8 = OpAccessChain %ptr_uint %output %uint_8
     %output_9 = OpAccessChain %ptr_uint %output %uint_9
     %output_10 = OpAccessChain %ptr_uint %output %uint_10
     %output_11 = OpAccessChain %ptr_uint %output %uint_11
     %output_12 = OpAccessChain %ptr_uint %output %uint_12
     %output_13 = OpAccessChain %ptr_uint %output %uint_13
     %output_14 = OpAccessChain %ptr_uint %output %uint_14

            %c1 = OpIAdd %uint %uint_6 %uint_1
            %c2 = OpIAdd %uint %uint_5 %uint_1
            %c3 = OpIAdd %uint %uint_0 %uint_1
       %vector1 = OpCompositeConstruct %v3uint %c1 %c2 %c3

          %and = OpBitwiseAnd %v3uint %vector1 %vector2
           %or = OpBitwiseOr %v3uint %vector1 %vector2
          %xor = OpBitwiseXor %v3uint %vector1 %vector2
          %add = OpIAdd %v3uint %vector1 %vector2
          %mul = OpIMul %v3uint %vector1 %vector2

         %and0 = OpCompositeExtract %uint %and 0
         %and1 = OpCompositeExtract %uint %and 1
         %and2 = OpCompositeExtract %uint %and 2
          %or0 = OpCompositeExtract %uint %or 0
          %or1 = OpCompositeExtract %uint %or 1
          %or2 = OpCompositeExtract %uint %or 2
         %xor0 = OpCompositeExtract %uint %xor 0
         %xor1 = OpCompositeExtract %uint %xor 1
         %xor2 = OpCompositeExtract %uint %xor 2
         %add0 = OpCompositeExtract %uint %add 0
         %add1 = OpCompositeExtract %uint %add 1
         %add2 = OpCompositeExtract %uint %add 2
         %mul0 = OpCompositeExtract %uint %mul 0
         %mul1 = OpCompositeExtract %uint %mul 1
         %mul2 = OpCompositeExtract %uint %mul 2

                 OpStore %output_0 %and0
                 OpStore %output_1 %and1
                 OpStore %output_2 %and2
                 OpStore %output_3 %or0
                 OpStore %output_4 %or1
                 OpStore %output_5 %or2
                 OpStore %output_6 %xor0
                 OpStore %output_7 %xor1
                 OpStore %output_8 %xor2
                 OpStore %output_9 %add0
                 OpStore %output_10 %add1
                 OpStore %output_11 %add2
                 OpStore %output_12 %mul0
                 OpStore %output_13 %mul1
                 OpStore %output_14 %mul2

                 OpReturn
                 OpFunctionEnd
