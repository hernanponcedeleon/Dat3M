; ============================
; Input: %12 = RuntimeArray {0}
; Input: 13 = RuntimeArray {0}
; Output: exists (%13[0] != 2)
; Config: 2, 1, 1
; ============================
; SPIR-V
; Version: 1.0
; Generator: Google Clspv; 0
; Bound: 64
; Schema: 0
               OpCapability Shader
               OpExtension "SPV_KHR_storage_buffer_storage_class"
               OpExtension "SPV_KHR_non_semantic_info"
         %52 = OpExtInstImport "NonSemantic.ClspvReflection.5"
               OpMemoryModel Logical GLSL450
               OpEntryPoint GLCompute %16 "mutex_test"
               OpSource OpenCL_C 200
         %53 = OpString "mutex_test"
         %54 = OpString " __kernel"
         %57 = OpString "l"
         %60 = OpString "x"
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize
               OpDecorate %_runtimearr_uint ArrayStride 4
               OpMemberDecorate %_struct_10 0 Offset 0
               OpDecorate %_struct_10 Block
               OpDecorate %12 DescriptorSet 0
               OpDecorate %12 Binding 0
               OpDecorate %13 DescriptorSet 0
               OpDecorate %13 Binding 1
               OpDecorate %2 SpecId 0
               OpDecorate %3 SpecId 1
               OpDecorate %4 SpecId 2
       %uint = OpTypeInt 32 0
          %2 = OpSpecConstant %uint 1
          %3 = OpSpecConstant %uint 1
          %4 = OpSpecConstant %uint 1
     %v3uint = OpTypeVector %uint 3
%gl_WorkGroupSize = OpSpecConstantComposite %v3uint %2 %3 %4
%_ptr_Private_v3uint = OpTypePointer Private %v3uint
%_runtimearr_uint = OpTypeRuntimeArray %uint
 %_struct_10 = OpTypeStruct %_runtimearr_uint
%_ptr_StorageBuffer__struct_10 = OpTypePointer StorageBuffer %_struct_10
       %void = OpTypeVoid
         %15 = OpTypeFunction %void
%_ptr_StorageBuffer_uint = OpTypePointer StorageBuffer %uint
     %uint_0 = OpConstant %uint 0
     %uint_1 = OpConstant %uint 1
    %uint_64 = OpConstant %uint 64
       %bool = OpTypeBool
    %uint_66 = OpConstant %uint 66
       %true = OpConstantTrue %bool
      %false = OpConstantFalse %bool
     %uint_2 = OpConstant %uint 2
          %8 = OpVariable %_ptr_Private_v3uint Private %gl_WorkGroupSize
         %12 = OpVariable %_ptr_StorageBuffer__struct_10 StorageBuffer
         %13 = OpVariable %_ptr_StorageBuffer__struct_10 StorageBuffer
         %16 = OpFunction %void None %15
         %17 = OpLabel
         %20 = OpAccessChain %_ptr_StorageBuffer_uint %12 %uint_0 %uint_0
         %21 = OpAccessChain %_ptr_StorageBuffer_uint %13 %uint_0 %uint_0
               OpBranch %23
         %23 = OpLabel
         %26 = OpAtomicLoad %uint %20 %uint_1 %uint_64
         %28 = OpIEqual %bool %26 %uint_0
               OpLoopMerge %47 %44 None
               OpBranch %31
         %31 = OpLabel
               OpSelectionMerge %39 None
               OpBranchConditional %28 %34 %39
         %34 = OpLabel
         %36 = OpAtomicExchange %uint %20 %uint_1 %uint_66 %uint_1
         %37 = OpINotEqual %bool %36 %uint_0
               OpBranch %39
         %39 = OpLabel
         %40 = OpPhi %bool %37 %34 %true %31
               OpBranchConditional %40 %42 %44
         %42 = OpLabel
               OpBranch %44
         %44 = OpLabel
         %45 = OpPhi %bool %false %42 %true %39
               OpBranchConditional %45 %47 %23
         %47 = OpLabel
         %48 = OpLoad %uint %21
         %49 = OpIAdd %uint %48 %uint_1
               OpStore %21 %49
               OpAtomicStore %20 %uint_1 %uint_64 %uint_0
               OpReturn
               OpFunctionEnd
         %56 = OpExtInst %void %52 Kernel %16 %53 %uint_2 %uint_0 %54
         %58 = OpExtInst %void %52 ArgumentInfo %57
         %59 = OpExtInst %void %52 ArgumentStorageBuffer %56 %uint_0 %uint_0 %uint_0 %58
         %61 = OpExtInst %void %52 ArgumentInfo %60
         %62 = OpExtInst %void %52 ArgumentStorageBuffer %56 %uint_1 %uint_0 %uint_1 %61
         %63 = OpExtInst %void %52 SpecConstantWorkgroupSize %uint_0 %uint_1 %uint_2
